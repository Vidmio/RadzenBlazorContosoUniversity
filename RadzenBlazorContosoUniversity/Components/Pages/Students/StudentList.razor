@page "/students"
@using RadzenBlazorContosoUniversity.Data
@using Microsoft.EntityFrameworkCore
@inject DialogService DialogService
@inject NotificationService NotificationService
@inherits RadzenBlazorContosoUniversity.Components.Layout.DBContextPage

<div class="col-12 col-md-6">
    <RadzenText Text="Students" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
</div>
<div class="col-12 col-md-6 ">
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@ShowInsertForm" Variant="Variant.Flat" />
</div>

<RadzenDataGrid @ref="Grid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@students" TItem="Student" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Student" Property="ID" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Student" Property="LastName" Title="First Name" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Student" Property="FirstMidName" Title="Last Name" Width="160px" />
        <RadzenDataGridColumn TItem="Student" Width="80px" TextAlign="TextAlign.End" Filterable="false" Sortable="false" Pickable="false">
            <Template >
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Icon="edit" Size="ButtonSize.ExtraSmall" Click="@(() => ShowUpdateForm(context))" />
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Icon="delete" Size="ButtonSize.ExtraSmall" Click="@(() => Delete(context))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    IEnumerable<Student> students;

    protected RadzenDataGrid<Student> Grid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        students = dbContext.Students;//.AsNoTracking();
    }

    public async Task ShowInsertForm()
    {
        dynamic x = await DialogService.OpenAsync<StudentForm>("New");
        if (x != null && x is bool)
        {
            if (x)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Uspešno", "Uspešno sačuvan", 3000);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Greška", "Greška prilikom dodavanja", 3000);
            }
        }
        await Grid.Reload();
    }

    public async void ShowUpdateForm(Student obj)
    {
        dynamic x = await DialogService.OpenAsync<StudentForm>("Edit", new Dictionary<string, object>()
        {
            {"Id",obj.ID}
        });
        if (x != null && x is bool)
        {
            if (x)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Uspešno", "Izmene uspešno izvrsene");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Greška", "Greška prilikom izmene");
            }
        }
        await Grid.Reload();
    }

    protected async Task Delete(Student del)
    {
        var confirmResult = await DialogService.Confirm("Da li ste sigurni?", "Obriši", new ConfirmOptions() { OkButtonText = "Da", CancelButtonText = "Ne" });

        if (confirmResult.HasValue && confirmResult.Value)
        {
            try
            {
                dbContext.Remove(del);
                dbContext.SaveChanges();
                DialogService.Close(del);
                NotificationService.Notify(NotificationSeverity.Success, "Uspešno", "Izmene obrisan zapis", 5000);
            }
            catch (Exception ex)
            {
                dbContext.Entry(students).State = EntityState.Detached;
                Console.WriteLine(ex.Message);
            }
        }
        await Grid.Reload();
    }
}
